#pragma KCIL_TU "__stdlib__string.c"
/* Generated by CIL v. 1.3.7 */
/* print_CIL_Input is true */


typedef unsigned long size_t;

extern   void *memcpy(void * __restrict  __dest , void const   * __restrict  __src ,
                                                  size_t __n )   ;

extern   char *strcpy(char * __restrict  __dest , char const   * __restrict  __src )   ;

extern   int strncmp(char const   *__s1 , char const   *__s2 ,
                                                 size_t __n )   ;

extern   char *strchr(char const   *__s , int __c )   ;

extern   size_t strcspn(char const   *__s , char const   *__reject )   ;

extern   size_t strspn(char const   *__s , char const   *__accept )   ;

extern   char *strtok_r(char * __restrict  __s , char const   * __restrict  __delim ,
                                                    char ** __restrict  __save_ptr )   ;

extern   size_t strlen(char const   *__s )   ;

extern   void *malloc(size_t __size )   ;

extern   void free(void *__ptr )   ;

char *strncpy(char * __restrict  dest , char const   * __restrict  src , size_t n ) 
{ char *ret ;
  size_t tmp ;
  char * __restrict  tmp___0 ;
  char tmp___1 ;
  char const   * __restrict  tmp___2 ;
  char * __restrict  tmp___3 ;
  size_t tmp___4 ;

  {

  ret = (char *)dest;

  while (1) {

    tmp = n;

    n --;

    if (! tmp) {

      return (ret);
    }

    tmp___0 = dest;

    dest ++;

    tmp___2 = src;

    src ++;

    tmp___1 = (char )*tmp___2;

    *tmp___0 = tmp___1;

    if (! tmp___1) {

      break;
    }
  }

  while (1) {

    tmp___4 = n;

    n --;

    if (! tmp___4) {

      break;
    }

    tmp___3 = dest;

    dest ++;

    *tmp___3 = (char)0;
  }

  return (ret);
}
}

size_t strlen(char const   *str ) 
{ char const   *s ;

  {

  s = str;

  while (*s) {

    s ++;
  }

  return ((unsigned long )(s - str));
}
}

void *memset(void *dest , int value , size_t len ) 
{ unsigned char *ptr ;
  unsigned char *tmp ;
  size_t tmp___0 ;

  {

  ptr = (unsigned char *)dest;

  while (1) {

    tmp___0 = len;

    len --;

    if (! (tmp___0 > 0UL)) {

      break;
    }

    tmp = ptr;

    ptr ++;

    *tmp = (unsigned char )value;
  }

  return (dest);
}
}

void *memchr(void const   *s , int c , size_t n ) 
{ unsigned char const   *src ;
  unsigned char uc ;
  size_t tmp ;

  {

  src = (unsigned char const   *)s;

  uc = (unsigned char )c;

  while (1) {

    tmp = n;

    n --;

    if (! (tmp != 0UL)) {

      break;
    }

    if ((int const   )*src == (int const   )uc) {

      return ((void *)src);
    }

    src ++;
  }

  return ((void *)0);
}
}

size_t strcspn(char const   *s1 , char const   *s2 ) 
{ char const   *sc1 ;
  char *tmp ;

  {

  sc1 = s1;

  while ((int const   )*sc1 != 0) {

    tmp = strchr(s2, (int )*sc1);

    if ((unsigned long )tmp != (unsigned long )((void *)0)) {

      return ((unsigned long )(sc1 - s1));
    }

    sc1 ++;
  }

  return ((unsigned long )(sc1 - s1));
}
}

char *strpbrk(char const   *s1 , char const   *s2 ) 
{ char const   *sc1 ;
  char *tmp ;

  {

  sc1 = s1;

  while ((int const   )*sc1 != 0) {

    tmp = strchr(s2, (int )*sc1);

    if ((unsigned long )tmp != (unsigned long )((void *)0)) {

      return ((char *)sc1);
    }

    sc1 ++;
  }

  return ((char *)((void *)0));
}
}

size_t strspn(char const   *s1 , char const   *s2 ) 
{ char const   *sc1 ;
  char *tmp ;

  {

  sc1 = s1;

  while ((int const   )*sc1 != 0) {

    tmp = strchr(s2, (int )*sc1);

    if ((unsigned long )tmp == (unsigned long )((void *)0)) {

      return ((unsigned long )(sc1 - s1));
    }

    sc1 ++;
  }

  return ((unsigned long )(sc1 - s1));
}
}

char *strstr(char const   *haystack , char const   *needle ) 
{ size_t needlelen ;
  int tmp ;
  char *tmp___0 ;

  {

  if ((int const   )*needle == 0) {

    return ((char *)haystack);
  }

  needlelen = strlen(needle);

  while (1) {

    tmp___0 = strchr(haystack, (int )*needle);

    haystack = (char const   *)tmp___0;

    if (! ((unsigned long )haystack != (unsigned long )((void *)0))) {

      break;
    }

    tmp = strncmp(haystack, needle, needlelen);

    if (tmp == 0) {

      return ((char *)haystack);
    }

    haystack ++;
  }

  return ((char *)((void *)0));
}
}

char *strtok_r(char *s , char const   *delimiters , char **lasts ) 
{ char *sbegin ;
  char *send ;
  size_t tmp ;
  size_t tmp___0 ;
  char *tmp___1 ;

  {

  if (s) {

    sbegin = s;
  } else {

    sbegin = *lasts;
  }

  tmp = strspn((char const   *)sbegin, delimiters);

  sbegin += tmp;

  if ((int )*sbegin == 0) {

    *lasts = (char *)"";

    return ((char *)((void *)0));
  }

  tmp___0 = strcspn((char const   *)sbegin, delimiters);

  send = sbegin + tmp___0;

  if ((int )*send != 0) {

    tmp___1 = send;

    send ++;

    *tmp___1 = (char )'\000';
  }

  *lasts = send;

  return (sbegin);
}
}

char *strtok(char * __restrict  s1 , char const   * __restrict  delimiters ) ;

static char *ssave  =    (char *)"";

char *strtok(char * __restrict  s1 , char const   * __restrict  delimiters ) 
{ char *tmp ;

  {

  tmp = strtok_r(s1, delimiters, (char ** __restrict  )(& ssave));

  return (tmp);
}
}

int strcmp(char const   *s1 , char const   *s2 ) 
{ int tmp ;

  {

  while ((int const   )*s1 == (int const   )*s2) {

    if ((int const   )*s1 == 0) {

      return (0);
    }

    s1 ++;

    s2 ++;
  }

  if ((int )*((unsigned char *)s1) < (int )*((unsigned char *)s2)) {

    tmp = -1;
  } else {

    tmp = 1;
  }

  return (tmp);
}
}

void *memmove(void *s1 , void const   *s2 , size_t n ) 
{ char *tmp ;
  void *tmp___0 ;

  {

  tmp___0 = malloc(n);

  tmp = (char *)tmp___0;

  memcpy((void * __restrict  )tmp, (void const   * __restrict  )s2, n);

  memcpy((void * __restrict  )s1, (void const   * __restrict  )tmp, n);

  free((void *)tmp);

  return (s1);
}
}

char *strchr(char const   *s , int c ) 
{ char *tmp ;

  {

  while (1) {

    if ((int const   )*s != 0) {

      if (! ((int const   )*s != (int const   )((char )c))) {

        break;
      }
    } else {

      break;
    }

    s ++;
  }

  if ((int const   )*s == (int const   )c) {

    tmp = (char *)s;
  } else {

    tmp = (char *)((void *)0);
  }

  return (tmp);
}
}

int strncmp(char const   *s1 , char const   *s2 , size_t n ) 
{ unsigned char uc1 ;
  unsigned char uc2 ;
  size_t tmp ;
  int tmp___0 ;

  {

  if (n == 0UL) {

    return (0);
  }

  while (1) {

    tmp = n;

    n --;

    if (tmp > 0UL) {

      if (! ((int const   )*s1 == (int const   )*s2)) {

        break;
      }
    } else {

      break;
    }

    if (n == 0UL) {

      return (0);
    } else {

      if ((int const   )*s1 == 0) {

        return (0);
      }
    }

    s1 ++;

    s2 ++;
  }

  uc1 = *((unsigned char *)s1);

  uc2 = *((unsigned char *)s2);

  if ((int )uc1 < (int )uc2) {

    tmp___0 = -1;
  } else {

    tmp___0 = (int )uc1 > (int )uc2;
  }

  return (tmp___0);
}
}

char *strrchr(char const   *s , int c ) 
{ char const   *last ;
  char *tmp ;
  char *tmp___0 ;

  {

  last = (char const   *)((void *)0);

  if (c == 0) {

    tmp = strchr(s, c);

    return (tmp);
  }

  while (1) {

    tmp___0 = strchr(s, c);

    s = (char const   *)tmp___0;

    if (! ((unsigned long )s != (unsigned long )((void *)0))) {

      break;
    }

    last = s;

    s ++;
  }

  return ((char *)last);
}
}

void *memcpy(void *dest , void const   *src , size_t count ) 
{ char *dst8 ;
  char *src8 ;
  char *tmp ;
  char *tmp___0 ;
  size_t tmp___1 ;

  {

  dst8 = (char *)dest;

  src8 = (char *)src;

  while (1) {

    tmp___1 = count;

    count --;

    if (! tmp___1) {

      break;
    }

    tmp = dst8;

    dst8 ++;

    tmp___0 = src8;

    src8 ++;

    *tmp = *tmp___0;
  }

  return (dest);
}
}

int memcmp(void const   *s1 , void const   *s2 , size_t n ) 
{ unsigned char const   *us1 ;
  unsigned char const   *us2 ;
  int tmp ;
  size_t tmp___0 ;

  {

  us1 = (unsigned char const   *)s1;

  us2 = (unsigned char const   *)s2;

  while (1) {

    tmp___0 = n;

    n --;

    if (! (tmp___0 != 0UL)) {

      break;
    }

    if ((int const   )*us1 != (int const   )*us2) {

      if ((int const   )*us1 < (int const   )*us2) {

        tmp = -1;
      } else {

        tmp = 1;
      }

      return (tmp);
    }

    us1 ++;

    us2 ++;
  }

  return (0);
}
}

char *strcat(char * __restrict  s1 , char const   * __restrict  s2 ) 
{ char *s ;

  {

  s = (char *)s1;

  while ((int )*s != 0) {

    s ++;
  }

  strcpy((char * __restrict  )s, s2);

  return ((char *)s1);
}
}

char *strncat(char * __restrict  s1 , char const   * __restrict  s2 , size_t n ) 
{ char *s ;
  char tmp ;
  char const   * __restrict  tmp___0 ;

  {

  s = (char *)s1;

  while ((int )*s != 0) {

    s ++;
  }

  while (1) {

    if (n != 0UL) {

      tmp___0 = s2;

      s2 ++;

      tmp = (char )*tmp___0;

      *s = tmp;

      if (! ((int )tmp != 0)) {

        break;
      }
    } else {

      break;
    }

    n --;

    s ++;
  }

  *s = (char )'\000';

  return ((char *)s1);
}
}
