mod MODEL-CHECK-BUILTIN-MODULE is
	including PL-MODEL-CHECKER-BUILTIN-MODULE .
	including C .
	
	eq state(
		B0:Bag
		< T > B1:Bag
			< threads > B2:Bag
				< thread > B3:Bag
					< k > Old:K </ k > 
				</ thread >
			</ threads >
		</ T >
	) LTL|= expAtom(k2model(A:K))
	=
	checkTruth(
		B0:Bag
		< T > B1:Bag
			< modelChecking > (.).K </ modelChecking > --- so equations match
			< threads > B2:Bag
				< thread > B3:Bag
					< k > '_!=_(A:K,, 'syntaxNat(Rat 0(.List{K}))) </ k > 
					--- < k > 'syntaxNat(Rat 0(.List{K})) </ k > 
					--- < k > A:K != tv(0, int) </ k >
				</ thread >
			</ threads >
		</ T >
	) .
	--- op state : Bag -> Model-Checker-State .
	--- op k2model : K -> LTLFormula .
		
	--- k2model(LTL-True) = LTLTrue
	--- k2model(LTL-False) = LTLFalse
	--- k2model(LTL-And(A:K, B:K)) = k2model(A:K) LTL/\ k2model(B:K)
	--- k2model(LTL-Or(A:K, B:K)) = k2model(A:K) LTL\/ k2model(B:K)
	--- k2model(LTL-Not(A:K)) = LTL~ k2model(A:K)
	--- k2model(LTL-Next(A:K)) = LTLO k2model(A:K)
	--- k2model(LTL-Always(A:K)) = LTL[] k2model(A:K)
	--- k2model(LTL-Eventually(A:K)) = LTL<> k2model(A:K)
	--- k2model(LTL-Until(A:K, B:K)) = k2model(A:K) LTLU k2model(B:K)
	--- k2model(LTL-Release(A:K, B:K)) = k2model(A:K) LTLR k2model(B:K)
	--- //rule k2model(LTL-Implies(A:K, B:K)) = k2model(A:K) LTL k2model(B:K)
	--- // rule k2model(LTL-Equiv(A:K, B:K)) = k2model(A:K) LTL k2model(B:K)
	--- k2model(LTL-WeakUntil(A:K, B:K)) = k2model(A:K) LTLW k2model(B:K)

endm
