6.2.2 Linkages of identifiers

1. An identifier declared in different scopes or in the same scope more than
once can be made to refer to the same object or function by a process called
linkage [29]. There are three kinds of linkage: external, internal, and none.

2. In the set of translation units and libraries that constitutes an entire
program, each declaration of a particular identifier with external linkage
denotes the same object or function. Within one translation unit, each
declaration of an identifier with internal linkage denotes the same object or
function. Each declaration of an identifier with no linkage denotes a unique
entity.

3. If the declaration of a file scope identifier for an object or a function
contains the storageclass specifier static, the identifier has internal
linkage. [30]

4. For an identifier declared with the storage-class specifier extern in a
scope in which a prior declaration of that identifier is visible [31], if the
prior declaration specifies internal or external linkage, the linkage of the
identifier at the later declaration is the same as the linkage specified at the
prior declaration. If no prior declaration is visible, or if the prior
declaration specifies no linkage, then the identifier has external linkage.

5. If the declaration of an identifier for a function has no storage-class
specifier, its linkage is determined exactly as if it were declared with the
storage-class specifier extern. If the declaration of an identifier for an
object has file scope and no storage-class specifier, its linkage is external.

6. The following identifiers have no linkage: an identifier declared to be
anything other than an object or a function; an identifier declared to be a
function parameter; a block scope identifier for an object declared without the
storage-class specifier extern.

7. If, within a translation unit, the same identifier appears with both
internal and external linkage, the behavior is undefined.

[29] There is no linkage between different identifiers.

[30] A function declaration can contain the storage-class specifier static only
if it is at file scope; see 6.7.1.

[31] As specified in 6.2.1, the later declaration might hide the prior
declaration.

6.2.7 Compatible type and composite type

1. Two types have compatible type if their types are the same. Additional rules
for determining whether two types are compatible are described in 6.7.2 for
type specifiers, in 6.7.3 for type qualifiers, and in 6.7.6 for declarators
[55]. Moreover, two structure, union, or enumerated types declared in separate
translation units are compatible if their tags and members satisfy the
following requirements: If one is declared with a tag, the other shall be
declared with the same tag. If both are completed anywhere within their
respective translation units, then the following additional requirements apply:
there shall be a one-to-one correspondence between their members such that each
pair of corresponding members are declared with compatible types; if one member
of the pair is declared with an alignment specifier, the other is declared with
an equivalent alignment specifier; and if one member of the pair is declared
with a name, the other is declared with the same name. For two structures,
corresponding members shall be declared in the same order. For two structures
or unions, corresponding bit-fields shall have the same widths. For two
enumerations, corresponding members shall have the same values.

2. All declarations that refer to the same object or function shall have
compatible type; otherwise, the behavior is undefined.

3. A composite type can be constructed from two types that are compatible; it
is a type that is compatible with both of the two types and satisfies the
following conditions:

- If both types are array types, the following rules are applied:

      - If one type is an array of known constant size, the composite type is an
        array of that size.

      - Otherwise, if one type is a variable length array whose size is
        specified by an expression that is not evaluated, the behavior is
        undefined.

      - Otherwise, if one type is a variable length array whose size is
        specified, the composite type is a variable length array of that size.

      - Otherwise, if one type is a variable length array of unspecified size,
        the composite type is a variable length array of unspecified size.

      - Otherwise, both types are arrays of unknown size and the composite type
        is an array of unknown size.

  The element type of the composite type is the composite type of the two
  element types.

- If only one type is a function type with a parameter type list (a function
  prototype), the composite type is a function prototype with the parameter type
  list.

- If both types are function types with parameter type lists, the type of each
  parameter in the composite parameter type list is the composite type of the
  corresponding parameters.

These rules apply recursively to the types from which the two types are derived.

4. For an identifier with internal or external linkage declared in a scope in
which a prior declaration of that identifier is visible [56], if the prior
declaration specifies internal or external linkage, the type of the identifier
at the later declaration becomes the composite type.

[55] Two types need not be identical to be compatible.

[56] As specified in 6.2.1, the later declaration might hide the prior
declaration.

J.5.11 Multiple external definitions

1. There may be more than one external definition for the identifier of an
object, with or without the explicit use of the keyword extern; if the
definitions disagree, or more than one is initialized, the behavior is undefined
(6.9.2).


