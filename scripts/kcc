#!/usr/bin/env perl
use strict;
use warnings;

use File::Basename;
use File::Temp;
use File::Spec::Functions qw(rel2abs catfile);
use File::Copy;
use File::Path qw(remove_tree);
use MIME::Base64;
use String::Escape qw(quote backslash); 
use Getopt::Declare;

# Here we trap control-c (and others) so we can clean up when that happens.
$SIG{'ABRT'} = 'interruptHandler';
$SIG{'TERM'} = 'interruptHandler';
$SIG{'QUIT'} = 'interruptHandler';
$SIG{'SEGV'} = 'interruptHandler';
$SIG{'HUP' } = 'interruptHandler';
$SIG{'TRAP'} = 'interruptHandler';
$SIG{'STOP'} = 'interruptHandler';
$SIG{'INT'} = 'interruptHandler'; # Handle control-c.

$::VERSION="0.1 GNU-compatible";

my @objFiles = ();
my @cSrcFiles = ();
my @cppSrcFiles = ();
my @tempFiles = ();

my $MAGIC = "\x7fKAST";

my $distDirectory = dirname(rel2abs($0));
our $profile;
my $profileDirectory;
{
  local $/=undef;
  open FILE, "$distDirectory/current-profile" or die "Couldn't find current profile: please fix $distDirectory/current-profile";
  $profile = <FILE>;
  $profileDirectory = "$distDirectory/$profile";
  close FILE;
}

our $defaultProfile;
{
  local $/=undef;
  open FILE, "$distDirectory/default-profile" or die "Couldn't find default profile: please fix $distDirectory/default-profile";
  $defaultProfile = <FILE>;
  close FILE;
}

opendir (my $DIR, $distDirectory);
our @profiles = ();
while ( my $entry = readdir $DIR) {
  next unless -d $distDirectory . '/' . $entry;
  next if $entry eq '.' or $entry eq '..' or $entry eq 'licenses';
  push(@profiles, $entry);
}

my $ignoredFlagsRegex = "^(";
{
  my $sep = "";
  open FILE, "$distDirectory/ignored-flags" or die "Couldn't load ignored flag list. Please touch $distDirectory/ignored-flags";
  while (<FILE>) {
    chop($_);
    $ignoredFlagsRegex = "$ignoredFlagsRegex$sep(?:$_)";
    $sep = "|";
  }
  $ignoredFlagsRegex = "$ignoredFlagsRegex)\$";
  close FILE;
}
my $ignoredFlags = qr/$ignoredFlagsRegex/;

my $cygwin = $^O eq "cygwin" || $^O eq "msys";
my $quoteString = "\"String\"";
my $quoteInt = "\"Int\"";
if ($cygwin) {
  $distDirectory = `cygpath -w $distDirectory`;
  $profileDirectory = `cygpath -w $profileDirectory`;
  chop($distDirectory);
  chop($profileDirectory);
  $quoteString = backslash($quoteString);
  $quoteInt = backslash($quoteInt);
}

my $krun;
my $printf;
if ($cygwin) {
  $krun = 'krun.bat';
  $printf = 'printf %%s';
} else {
  $krun = 'krun';
  $printf = 'printf %s';
}

our $ourDist = $distDirectory;

my $cparser = catfile($distDirectory, 'cparser');
my $cppparser = catfile($distDirectory, 'clang-kast');

my $TRANS_DEF =
      catfile($profileDirectory, "c11-translation-kompiled");

my @originalArgv;

my @cppWarnsList = (
  "import",
  "char-subscripts",
  "comment",
  "format",
  "format-y3k",
  "format-extra-args",
  "format-zero-length",
  "format-nonliteral",
  "format-security",
  "format=3",
  "nonnull",
  "init-self",
  "implicit-int",
  "implicit-function-declaration",
  "error-implicit-function-declaration",
  "implicit",
  "main",
  "missing-braces",
  "parentheses",
  "sequence-point",
  "return-type",
  "switch",
  "switch-default",
  "switch-enum",
  "trigraphs",
  "unused-function",
  "unused-label",
  "unused-parameter",
  "unused-variable",
  "unused-value",
  "unused",
  "uninitialized",
  "unknown-pragmas",
  "strict-aliasing",
  "all",
  "extra",
  "div-by-zero",
  "system-headers",
  "float-equal",
  "traditional",
  "declaration-after-statement",
  "undef",
  "endif-labels",
  "shadow",
  "larger-than-len",
  "pointer-arith",
  "bad-function-cast",
  "cast-qual",
  "cast-align",
  "write-strings",
  "conversion",
  "sign-compare",
  "aggregate-return",
  "strict-prototypes",
  "old-style-definition",
  "missing-prototypes",
  "missing-declarations",
  "missing-noreturn",
  "missing-format-attribute",
  "multichar",
  "deprecated-declarations",
  "packed",
  "padded",
  "redundant-decls",
  "nested-externs",
  "unreachable-code",
  "inline",
  "invalid-pch",
  "long-long",
  "disabled-optimization",
  "error"
);
our %cppWarns =  map { $_ => 1 } @cppWarnsList;

our @cppArgs = ();
our @stdlib = ();
our @ld_lib = ();
our @ldArgs = ();
our @warns = ();
our @nowarns = ();
our $xLang = "none";
my $hasStdin;

our $oflag;

my $spec = q(#
      [strict]
      -c				Compile and assemble, but do not link.
      -shared				Compile and assemble into a single object file (for
					faster loading).
      -d				Print debugging information.
      -D <name>[=[<definition>]]	Predefine <name> as a macro, with definition <definition>.
{ 
  if (defined $definition) {
    push(@main::cppArgs, "-D$name=$definition");
  } elsif ($_PUNCT_{"="}) {
    push(@main::cppArgs, "-D$name=");
  } else  {
    push(@main::cppArgs, "-D$name");
  }
}
      -U <name>				Undefine <name> as a macro.
{ push(@main::cppArgs, "-U$name"); }
      -P				Inhibit preprocessor line numbers
{ push(@main::cppArgs, "-P"); }
      -E				Preprocess only.
      -I <dir>				Look for headers in <dir>.
{ push(@main::cppArgs, '-I', $dir); }
      -include <file>			Add header to file during preprocessing.
{ push(@main::cppArgs, '-include', $file); }
      -L <dir>				Look for shared libraries in <dir>.
{ push(@main::ld_lib, $dir) }
      -nodefaultlibs			Do not link against the standard library.
      -o <file>				Place the output into <file>.
{ $main::oflag = $file; }
      -l <lib>				Link semantics against library in search path.
{ push (@main::stdlib, $lib) }
      <files>...			C files to be compiled. [required] [repeatable]
{ classify(@files); }
      --help				Show usage information [undocumented]
                        { $self->usage(0); }
      -version				Show version information [undocumented]
{ 
  $self->version(); 
  my $profiles = join("\n	                    ", @main::profiles);
  print("	Current profile: $main::profile\n	Installed profiles: $profiles\n	Default profile: $main::defaultProfile\n\n");
  exit 0;
}
      -Version				[ditto]
      -VERSION				[ditto]
      --version				[ditto]
      --Version				[ditto]
      --VERSION				[ditto]
      -v				[ditto]
      -V				[ditto]

      -M				Dependency generation. See documentation for GCC preprocessor
{ push(@main::cppArgs, '-M'); }
      -MM				Dependency generation. See documentation for GCC preprocessor
{ push(@main::cppArgs, '-MM'); }
      -MD				Dependency generation. See documentation for GCC preprocessor
{ push(@main::cppArgs, '-MD'); }
      -MMD				Dependency generation. See documentation for GCC preprocessor
{ push(@main::cppArgs, '-MMD'); }
      -MP				Dependency generation. See documentation for GCC preprocessor
{ push(@main::cppArgs, '-MP'); }
      -MF <file>			Dependency generation. See documentation for GCC preprocessor
{ push(@main::cppArgs, '-MF', $file); }
      -MT <target>			Dependency generation. See documentation for GCC preprocessor
{ push(@main::cppArgs, '-MT', $target); }
      -d<chars>				Debugging info from preprocessor. See documentation for GCC
{ push(@main::cppArgs, "-d$chars"); }
      -frunner-script			Compile program to perl script with analysis tool options
      -fissue-report=<file>		Write issues to the specified file in CSV format
      -Wlint				Generate lint errors for potentially undesirable behaviors.*
      -flint				[ditto]
      -Wno-undefined			Do not output undefined behaviors.
      -Wno-unspecified			Do not output unspecified behaviors.
      -Wno-implementation-defined	Do not output implementation-defined behaviors.
      -Wno-<errcode>			Ignore specified error code
{
  if ($main::cppWarns{$errcode}) {
    push(@main::cppArgs, "-Wno-$errcode");
  } else {
    push(@main::nowarns, $errcode);
  }
}
      -W<errcode>				Do not ignore specified error code
{
  if ($main::cppWarns{$errcode}) {
    push(@main::cppArgs, "-W$errcode");
  } else {
    push(@main::warns, $errcode);
  }
}
      -w						Ignore all preprocessor warnings
{  push(@main::cppArgs, "-w"); }
      -fheap-size=<size>		Used with -flint to detect dynamic memory overflow.*
      -fstack-size=<size>		Used with -flint to detect stack overflow.*
      -frecover-all-errors		Recover from fatal errors that would normally cause an application to crash.
      					WARNING: This can change the semantics of tools like autoconf which analyze
      					the exit code of the compiler to trigger unexpected or undesirable results.

      -x <language>			Set language for input files.
{ $main::xLang = $language; }
      -pthread				Enables pthread library (highly experimental, likely broken)
{ push(@main::cppArgs, '-pthread');  push(@main::stdlib, 'pthread'); }

      -Xmx<size>			Passed to underlying JVM
      -profile <name>			Set KCC profile.
{
      if ( grep( /^$name$/, @main::profiles ) ) {
           open(my $file, '>', "$main::ourDist/current-profile") or die "Could not open profile file. Check OS permissions.";
           print $file $name;
           close $file;
           exit 0;
      } else {
           print "Profile '$name' is not installed. See kcc -v for list of installed profiles.\n";
           exit 1;
      }
}
      * Indicates flags that require RV-Match from http://www.runtimeverification.com/match
        to run.

      For a complete list of other flags ignored by kcc, refer to ) . $distDirectory . q(/ignored-flags, which contains
      one regular expression per line.
                  
      The following lines of output are added to this message for compatibility
      with GNU ld and libtool:

      : supported targets: elf
      );

my $args = Getopt::Declare->new($spec, ['-BUILD']);

exit main();

sub main {
     @originalArgv = @ARGV;
     $args->parse() or die "Failed to parse the command line.\n";

     my $clib;
     if ($cygwin) {
       $clib = 'msvcrt';
     } else {
       $clib = 'c';
     }

     push(@stdlib, $clib);

     my $heapSize = "1G";
     if ($args->{'-Xmx'}) {
          $heapSize = $args->{'-Xmx'};
     }
     # Set heap and stack size of krun
     $ENV{K_OPTS} = "-Xmx$heapSize";
     if ($args->{'-d'}) {
       $ENV{OCAMLRUNPARAM} = "s=32M,b,l=8M";
     } else {
       $ENV{OCAMLRUNPARAM} = "s=32M,l=8M";
     }

     my @allSources = (@cSrcFiles, @cppSrcFiles);

     if ($args->{'-E'} || $args->{'-M'} || $args->{'-MM'}) {
          my $oval = $main::oflag;
          if ($oval) {
            if (scalar @allSources > 1) {
              die "cannot specify -o with -c or -E with multiple files";
            }
          } else {
            $oval = '-';
          }
          return preprocess($oval, $allSources[0], scalar @cppSrcFiles);
     } elsif ($hasStdin) {
       die "-E or -x required when input is from standard input";
     }

     if ($args->{'-c'}) {
          my $oval = $main::oflag;
          if ($oval) {
            if (scalar @allSources > 1) {
              die "cannot specify -o with -c or -E with multiple files";
            }
          } else {
            $oval = basename($allSources[0], ".c", ".cc", ".cp", ".cxx", ".cpp", ".CPP", ".c++", ".C", ".h", ".hh", ".hp", ".hxx", ".hpp", ".HPP", ".h++", ".H", ".tcc") . ".o";
          }
          my $result = tempFile();
          compile($result, $allSources[0], scalar @cppSrcFiles);
          move($result, $oval);
          return 0;
     }

     if ($args->{'-shared'}) {
          mergeObjs(1, 0);
          move($objFiles[0], $main::oflag || 'a.out');
          return 0;
     }

     if (!$args->{'-s'}) {
          $xLang = "none";
          classify(catfile($profileDirectory, 'lib', 'libc.so'));
     }

     # Reduce our remaining source files to object files
     mergeObjs(0, 0);

     my $oval = $main::oflag || 'a.out';

     my $programConfFile = tempFile(); 

     # At this point, we have 0 source files and 1 object file left for
     # the final calls to krun.
     my $retval = execute($krun, getKRunCommand($programConfFile, \@objFiles, undef, 1, 1));
     checkError($retval, $programConfFile, 1);

     open(FILE, $programConfFile) or die "Couldn't open file: $!\n";
     my $programConf = join("", <FILE>);
     close(FILE);

     if ($args->{'-frunner-script'}) {
          $programConf = encode_base64($programConf);
          open(FILE, catfile($distDirectory, 'program-runner')) or die "Couldn't open file: $!\n";
          my $template = join("", <FILE>);
          close(FILE);

          $template =~ s?EXTERN_SCRIPTS_DIR?$profileDirectory?g;
          $template =~ s?EXTERN_HEAP_SIZE?$heapSize?g;

          open(my $programRunner, '>', $oval) or die "Couldn't open file: $!\n";
          print $programRunner "$template\n";
          print $programRunner "sub linkedProgram {\nreturn <<'PROGRAMCONF';\n$programConf\nPROGRAMCONF\n}\n";
          if (@ldArgs) {
                print $programRunner "sub nativeLibraries {\n return '@ldArgs';\n}\n";
          } else {
                print $programRunner "sub nativeLibraries {\n return undef;\n}\n";
          }
          close($programRunner);

     } else {
          # add space to end of args with () so that batch scripts work on windows
          my @options = initOptions();
          if ($args->{'-flint'} || $args->{'-Wlint'}) {
               my $heapSize;
               if ($args->{'-fheap-size='}) {
                    $heapSize = `echo $args->{'-fheap-size='} | sed -e 's/[Tt]/kg/i;s/[Gg]/km/i;s/[Mm]/kk/i;s/k/*1024/ig' | bc`;
                    chop($heapSize);
               } else {
                    $heapSize = 1024 * 1024 * 1024;
               }
               my $heapSizeInt = $heapSize;
               $heapSize = quote(backslash($heapSize));
               if ($cygwin) {
                    $heapSize = backslash($heapSize);
               }
               my $stackSize;
               if ($args->{'-fstack-size='}) {
                    $stackSize = `echo $args->{'-fstack-size='} | sed -e 's/[Tt]/kg/i;s/[Gg]/km/i;s/[Mm]/kk/i;s/k/*1024/ig' | bc`;
                    chop($stackSize);
               } else {
                    $stackSize = `bash -c 'ulimit -s'`;
                    chop($stackSize);
                    if ($stackSize eq 'unlimited') {
                        $stackSize = $heapSizeInt;
                    } else {
                        $stackSize = $stackSize * 1024; # result was in kb
                    }
               }
               $stackSize = quote(backslash($stackSize));
               if ($cygwin) {
                    $stackSize = backslash($stackSize);
               }
               push(@options, "`Heap`(#token($heapSize, $quoteInt))");
               push(@options, "`Stack`(#token($stackSize, $quoteInt))");
          }
          my $opts = makeSet(@options);

          my @cmd = ('-d', catfile($profileDirectory, "c11-cpp14-kompiled"), 
                  '-cARGV=`#argv`(.KList) ', "-pARGV=$printf",
                  '-w', 'none', '--parser', 'cat', $programConfFile,
                  '--exit-code', "<result-value> _:Int </result-value>",
                  "-cOPTIONS=$opts ", "-pOPTIONS=$printf",
                  '--output-file', $oval, '--ocaml-compile', '--ocaml-dump-exit-code', '139',
                  '--ocaml-serialize-config', '$PGM'
                  );

          if ($args->{'-d'}) {
               push(@cmd, '--debug');
          }
          if (@ldArgs) {
            push @cmd, '--native-libraries';
            push @cmd, "@ldArgs";
          }
          my $retval = execute($krun, @cmd);
          checkError($retval, $programConfFile, 1);
     }

     my $numFilesChanged = chmod(0755, $oval);

     ($numFilesChanged == 1)
          or die "Call to chmod $oval failed\n";

     return 0;
}

sub mergeObjs {
     my ($mergeObjs, $numSrc) = (@_);

     my @pids = ();

     while (scalar @cSrcFiles > $numSrc) {
          my $oval = tempFile();
          compile($oval, shift @cSrcFiles, 0);
          push(@objFiles, $oval);
     }
     while (scalar @cppSrcFiles > $numSrc) {
          my $oval = tempFile();
          compile($oval, shift @cppSrcFiles, 1);
          push(@objFiles, $oval);
     }

     if ($mergeObjs) {
         my $accum = tempFile();
         my @cmd = getKRunCommand($accum, \@objFiles, undef, 0, 1);
         my $retval = execute($krun, @cmd);
         checkError($retval, $accum, 1);
         @objFiles = ($accum);
     }
}

sub isKObj {
  my $filename = shift;
  open(my $file, $filename) or return 0;
  my $buf;
  read($file, $buf, 5);
  close($file);
  return $buf eq $MAGIC;
}

sub isAr {
  my $filename = shift;
  my $retval = system("ar t $filename > /dev/null 2>&1") >> 8;
  return $retval == 0;
}

sub classify {
     my @files = @_;

     my @nativeLibs = ();
     for (@stdlib) {
       my $lib = $_;
       my $isK = 0;
       for (@ld_lib) {
         my $candidate = catfile($_, "lib$lib.so");
         if (-e $candidate) {
           push(@files, $candidate);
           $isK = 1;
           last;
         }
         $candidate = catfile($_, "lib$lib.a");
         if (-e $candidate) {
           push(@files, $candidate);
           $isK = 1;
           last;
         }
       }
       if (!$isK) {
         push(@nativeLibs, $lib);
       }
     }
     @stdlib = ();
     # todo: interleaving correctly
     for (@ld_lib) {
       push(@ldArgs, "-L$_");
     }
     @ld_lib = ();
     for (@nativeLibs) {
       push(@ldArgs, "-l$_");
     }

     for (@files) {
          my $lang = $xLang;
          if ($lang eq 'none') {
            if ($_ eq '-') {
              $hasStdin = 1;
              $lang = 'c';
            } else {
              my ($base, $dir, $suffix) = fileparse($_, 
                ('\.c', '\.cc', '\.cp', '\.cxx', '\.cpp', '\.CPP', '\.c++',
                 '\.C', '\.h', '\.hh', '\.hp', '\.hxx', '\.hpp', '\.HPP', 
                 '\.h++', '\.H', '\.tcc'));
              if ($suffix eq '.c' or $suffix eq '.h') {
                $lang = 'c';
              } elsif ($suffix ne '') {
                $lang = 'c++';
              }
            }
          }

          if ($lang eq 'c' or $lang eq 'c-header') {
            push(@cSrcFiles, $_);
          } elsif ($lang eq 'c++' or $lang eq 'c++-header') {
            push(@cppSrcFiles, $_);
          } elsif ($lang ne 'none') {
            die "Unsupported -x option: $lang";
          } elsif (isKObj($_)) {
               push(@objFiles, $_);
          } elsif (isAr($_)) {
               my ($base, $dir, $suffix) = fileparse($_);
               extractStatic($_, $base, $suffix);
          } elsif (isNativeObj($_) or -e $_) {
               push(@ldArgs, $_);
          } else {
               if (!($_ =~ $ignoredFlags)) {
                   die "Unsupported option $_";
               }
          }
     }
}

sub isNativeObj {
  my ($file) = (@_);
  system("nm $file > /dev/null 2>&1");
  if ($? >> 8) {
    return 0;
  }
  return 1;
}

sub extractStatic {
  my ($file, $basename, $suffix) = (@_);
  -e $file or die "$file does not exist";
  my $tempDir = File::Temp->newdir(
      TEMPLATE => 'tmp-kcc-ar-XXXX',
      CLEANUP => 0);
  push (@tempFiles, $tempDir);
  copy ($file, $tempDir);
  system("cd $tempDir && ar -x $basename$suffix");
  if ($? >> 8) {
    die "failed to run ar -x";
  }
  opendir my $dir, $tempDir or die "Cannot open directory: $tempDir";
  my @files = readdir $dir;
  closedir $dir;
  for (@files) {
    if ($_ ne "$basename$suffix" && $_ ne "." && $_ ne "..") {
      push(@objFiles, "$tempDir/$_");
    }
  }
}

sub compile {
     my ($oval, $inputFile, $isCPP) = (@_);
     my @arr = ();
     my $retval = execute($krun, getKRunCommand($oval, \@arr, $inputFile, 0, $isCPP));
     checkError($retval, $oval, 1);
}

sub pushObj {
     my ($arr, $obj, $i) = (@_);

     if (defined $obj) {
          push(@{$_[0]}, "-pOBJ$i=cat");
          push(@{$_[0]}, "-cOBJ$i=$obj");
     } else {
          push(@{$_[0]}, "-pOBJ$i=$printf");
          push(@{$_[0]}, "-cOBJ$i=.K");
     }
}
   

sub initOptions {
     my @options = ();
     if ($args->{'-fissue-report='}) {
          my $file = quote(backslash(quote(backslash($args->{'-fissue-report='}))));
          if ($cygwin) {
               $file = backslash($file);
          }
          push(@options, "`CSV`(#token($file, $quoteString))");
     }
     if ($args->{'-frecover-all-errors'}) {
          push(@options, "`RecoverAll`(.KList)");
     }
     if ($args->{'-Wno-undefined'}) {
          push(@options, "`No`(`Undef`(.KList))");
     }
     if ($args->{'-Wno-unspecified'}) {
          push(@options, "`No`(`Unspec`(.KList))");
     }
     if ($args->{'-Wno-implementation-defined'}) {
          push(@options, "`No`(`Impl`(.KList))");
     }
     foreach (@main::warns) {
          my $word = quote(backslash(quote(backslash($_))));
          push(@options, "`Warn`(#token($word, $quoteString))");
     }
     foreach (@main::nowarns) {
          my $word = quote(backslash(quote(backslash($_))));
          push(@options, "`No`(`Warn`(#token($word, $quoteString)))");
     }
     if ($args->{'-flint'} || $args->{'-Wlint'}) {
          push(@options, "`Lint`(.KList)");
     }
     @options
}

sub getKRunCommand {
     my ($output, $objsRef, $src, $link, $isCPP) = (@_);
     my @objs = @$objsRef;

     my @krun_args = (
          '--output', 'binary', 
          '--output-file', $output,
          '-d', $TRANS_DEF,
          '-w', 'none',
          '--smt', 'none',
          '--exit-code',
          '<result-value> _:Int </result-value>'
     );

     if ($args->{'-d'}) {
          push(@krun_args, '--debug');
     }
     my @options = initOptions();
     if (!$link) {
          push(@options, "`NoLink`(.KList)");
          push(@krun_args, "--interpret");
     } else {
          push(@krun_args, '--mini-krun');
     }

     my $opts = makeSet(@options);
     push(@krun_args, "-cOPTIONS=$opts ");
     push(@krun_args, "-pOPTIONS=$printf");

     if (scalar @objs) {
          my $allObjsFile = tempFile();
          my @catArgs = ();
          my @objTexts = ();
          for (my $i = 0; $i < scalar @objFiles; $i++) {
               my $thisObj = `cat $objFiles[$i]`;
               #push(@objTexts, "`unwrapObj`($thisObj)");
               $thisObj = substr($thisObj, 8, -1);
               # wrap $thisObj with `unwrapObj`()
               push(@objTexts, "$thisObj\x02\x00\x00\x00\x00\x00\x00\x00\x09\x00u\x00n\x00w\x00r\x00a\x00p\x00O\x00b\x00j\x00\x00\x00\x00\x01");
          }
          my $objText = join('', @objTexts);
          my $one = chr((scalar @objTexts >> 24) & 0xff);
          my $two = chr((scalar @objTexts >> 16) & 0xff);
          my $three = chr((scalar @objTexts >> 8) & 0xff);
          my $four = chr((scalar @objTexts >> 0) & 0xff);
          $objText = "$MAGIC\x04\x00\x01$objText\x03$one$two$three$four\x07";
          open(my $file, '>', "$allObjsFile");
          print $file $objText;
          close $file;

          push(@krun_args, "-pOBJS=cat");
          push(@krun_args, "-cOBJS=$allObjsFile");
     } else {
          push(@krun_args, "-pOBJS=$printf");
          push(@krun_args, "-cOBJS=.K");
     }
     if (defined $src) {
          my $kast = parse($src, $isCPP);
          push(@krun_args, '--parser', 'cat');
          push(@krun_args, $kast);
     } else {
          push(@krun_args, "-pPGM=$printf");
          push(@krun_args, '-cPGM=.K');
     }

     if (scalar @ldArgs) {
          push(@krun_args, '--native-libraries');
          push(@krun_args, "@ldArgs");
     }

     return @krun_args;
}

sub preprocess {
     my ($output, $inputFile, $isCPP) = (@_);
     my $directoryname = dirname($inputFile);
     if ($isCPP) {
       my @ppArgs = ("$profileDirectory/cpp-pp",
                     @main::cppArgs, $inputFile, '-o', $output);

       my $retval = execute(@ppArgs);
       return $retval;
     }

     my @ppArgs = ("$profileDirectory/pp",
                   @main::cppArgs, $inputFile, '-o', $output);

     my $retval = execute(@ppArgs);
     return $retval;
}

sub execute {
    my @cmd = @_;
    if ($args->{'-d'}) {
      print("'" . join("' '", @cmd) . "'\n");
    }
    my $pgm = shift @cmd;
    system($pgm, @cmd);
    return $? >> 8;
}

sub tempFile {
     my $file = File::Temp->new( 
                TEMPLATE => 'tmp-kcc-XXXXXXX', 
                UNLINK => 0 );
     push(@tempFiles, $file);
     return $file;
}

sub parse {
     my ($inputFile, $isCPP) = (@_);

     my $ppResult = tempFile();
     my $kast = tempFile();
     checkError(preprocess($ppResult, $inputFile, $isCPP), $ppResult, 0);

     if ($isCPP) {
       my $cmd = ("$cppparser $ppResult -- -x c++-cpp-output > $kast");
       if ($args->{'-d'}) {
         print("$cmd\n");
       }
       system($cmd);
       checkError($? >> 8, $kast, 0);

       return $kast;
     }
     my $cmd = ("$cparser $ppResult --trueName '$inputFile' > $kast");
     if ($args->{'-d'}) {
       print("$cmd\n");
     }
     system($cmd);
     checkError($? >> 8, $kast, 0);

     return $kast;
}

sub checkError {
  my ($retval, $output, $isBinary) = (@_);
  if ($retval) {
    if ($isBinary) {
      system("k-bin-to-text", $output, 'config');
    } else {
      copy($output, 'config');
    }
    if ($args->{'-d'}) {
      print STDERR "Translation failed (config dumped). Refer to last command run for details.\n";
      exit $retval;
    } else {
      print STDERR "Translation failed (config dumped). Run kcc -d @originalArgv to see commands run.\n";
      exit $retval;
    }
  }
}

sub makeSet {
  my $set = '`.Set`(.KList)';
  foreach my $el (@_) {
    $set = "`_Set_`(`SetItem`($el), $set)";
  }
  return $set;
} 

sub interruptHandler {
# Call single cleanup point.
     finalCleanup();
# Since we were interrupted, we should exit with a non-zero code.
     exit 1;
}

# This subroutine can be used as a way to ensure we clean up all resources
# whenever we exit. This is going to be mostly temp files. If the program
# terminates for almost any reason, this code will be executed.
sub finalCleanup {
     if (!$args->{'-d'}) {
          for (@tempFiles) {
               if (-d $_) {
                    remove_tree($_);
               } else {
                    unlink;
               }
          }
     }
}

# This block gets run at the end of a normally terminating program, whether it
# simply exits, or dies. We use this to clean up.
END {
# $? contains the value the program would normally have exited with.
     my $retval = $?;
# Call single cleanup point.
     finalCleanup();
     exit $retval;
}

